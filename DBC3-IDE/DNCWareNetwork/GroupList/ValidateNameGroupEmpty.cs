///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace DBC3_IDE.DNCWareNetwork.GroupList
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateNameGroupEmpty recording.
    /// </summary>
    [TestModule("d1ed9b50-6a30-4edd-9e4c-2a3c4836100c", ModuleType.Recording, 1)]
    public partial class ValidateNameGroupEmpty : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::DBC3_IDE.DBC3_IDERepository repository.
        /// </summary>
        public static global::DBC3_IDE.DBC3_IDERepository repo = global::DBC3_IDE.DBC3_IDERepository.Instance;

        static ValidateNameGroupEmpty instance = new ValidateNameGroupEmpty();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateNameGroupEmpty()
        {
            IdReturn = "";
            Domain = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateNameGroupEmpty Instance
        {
            get { return instance; }
        }

#region Variables

        string _IdReturn;

        /// <summary>
        /// Gets or sets the value of variable IdReturn.
        /// </summary>
        [TestVariable("08777f58-3a22-42dc-aec0-a7ac79cd33a7")]
        public string IdReturn
        {
            get { return _IdReturn; }
            set { _IdReturn = value; }
        }

        string _Domain;

        /// <summary>
        /// Gets or sets the value of variable Domain.
        /// </summary>
        [TestVariable("f4d89ff6-a511-4616-ac75-25c28979a61a")]
        public string Domain
        {
            get { return _Domain; }
            set { _Domain = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            IdReturn = MyTest1.Utils.nameToID(repo.DNCWAREBlockChain3.GroupList.NameGroupLine1Info, Domain);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(1));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$IdReturn) on item 'DNCWAREBlockChain3.GroupList.IDGroupLine1'.", repo.DNCWAREBlockChain3.GroupList.IDGroupLine1Info, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.DNCWAREBlockChain3.GroupList.IDGroupLine1Info, "InnerText", IdReturn);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(3));
            Delay.Duration(2000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
