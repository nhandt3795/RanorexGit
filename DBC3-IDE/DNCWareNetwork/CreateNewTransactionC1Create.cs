///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace DBC3_IDE.DNCWareNetwork
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CreateNewTransactionC1Create recording.
    /// </summary>
    [TestModule("a7551f9d-ec35-44e4-a971-389975734797", ModuleType.Recording, 1)]
    public partial class CreateNewTransactionC1Create : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::DBC3_IDE.DBC3_IDERepository repository.
        /// </summary>
        public static global::DBC3_IDE.DBC3_IDERepository repo = global::DBC3_IDE.DBC3_IDERepository.Instance;

        static CreateNewTransactionC1Create instance = new CreateNewTransactionC1Create();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CreateNewTransactionC1Create()
        {
            Type = "";
            Name = "";
            Domain = "";
            NewIDTransaction = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CreateNewTransactionC1Create Instance
        {
            get { return instance; }
        }

#region Variables

        string _Type;

        /// <summary>
        /// Gets or sets the value of variable Type.
        /// </summary>
        [TestVariable("b9317b05-b328-49fb-ac12-7c713ac80420")]
        public string Type
        {
            get { return _Type; }
            set { _Type = value; }
        }

        string _Name;

        /// <summary>
        /// Gets or sets the value of variable Name.
        /// </summary>
        [TestVariable("9ca56b1c-ec61-4617-bff8-efa8d227ecee")]
        public string Name
        {
            get { return _Name; }
            set { _Name = value; }
        }

        string _Domain;

        /// <summary>
        /// Gets or sets the value of variable Domain.
        /// </summary>
        [TestVariable("7b39b63e-19aa-4284-a7af-5ff2d34cced9")]
        public string Domain
        {
            get { return _Domain; }
            set { _Domain = value; }
        }

        string _NewIDTransaction;

        /// <summary>
        /// Gets or sets the value of variable NewIDTransaction.
        /// </summary>
        [TestVariable("234b7e57-178d-41f3-ad60-e29ed362c59c")]
        public string NewIDTransaction
        {
            get { return _NewIDTransaction; }
            set { _NewIDTransaction = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$Type' on item 'DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.TextboxType'.", repo.DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.TextboxTypeInfo, new RecordItemIndex(0));
            repo.DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.TextboxType.Element.SetAttributeValue("TagValue", Type);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(1));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$Name' on item 'DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.TextboxName'.", repo.DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.TextboxNameInfo, new RecordItemIndex(2));
            repo.DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.TextboxName.Element.SetAttributeValue("TagValue", Name);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(3));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$Domain' on item 'DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.TextboxDomain'.", repo.DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.TextboxDomainInfo, new RecordItemIndex(4));
            repo.DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.TextboxDomain.Element.SetAttributeValue("TagValue", Domain);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(5));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DNCWAREBlockChain3.HomePage.ButtonSubmit' at Center.", repo.DNCWAREBlockChain3.HomePage.ButtonSubmitInfo, new RecordItemIndex(6));
            repo.DNCWAREBlockChain3.HomePage.ButtonSubmit.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(7));
            Delay.Duration(2000, false);
            
            NewIDTransaction = MyTest1.Utils.formatId(repo.DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.IDNewTransactionInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(9));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.ButtonOK' at Center.", repo.DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.ButtonOKInfo, new RecordItemIndex(10));
            repo.DNCWAREBlockChain3.HomePage.C1domainPage.PopupNewTransaction.ButtonOK.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(11));
            Delay.Duration(2000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
